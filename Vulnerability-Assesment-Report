INTRODUCTION
There are 50 million dollars that is stollen from companies because of ransomware or cybersecurity attacks. Frameworks are lists of controls that help us protect and mitigate against these attacks. The two I'll be using and most familiar with are the ATT&CK framework and the NIST framework. The ATT&CK framework is an acronym for Adversaries Tactics Techniques and Comon Knowledge; and is used to make cybersecurity threat models. NIST is an acronym that stands for National Institute of Standards and Technology; and is used to promote security guidelines, and best practices.

MITRE ATT&CK FRAMEWORK
I chose a specific attack in the Defense Evasion Table in the MITRE framework, called Access Token Manipulation. How this is done is adversaries modify the access token inside a Security Access Markup Language or a Open Authorization or any Single Sign On framework. So that the adversary looks normal, and these frameworks authenticate the adversary.

 Also, it is possible to use access tokens to make windows users run processes to make a malicious program appear to be a child item or something related to another program that is already running. When this happens, the child takes on the same security controls associated with the newer process through a process called inheritance. Resulting in a risk called weak permissions. 

A malicious user can also use Application Programing Interfaces; to copy the security controls of an existing API; known as token stealing. This technique can also be used to make a new process called impersonation.

There are multiple examples that have been used in the past. One of them is called Apple Seed; what this example does is it creates a security concern called a backdoor that allows adversaries to access computers without being at the computer. This exploit is used in many types of different attacks such as a command scripting interpreter; where Appleseed has the capability to execute payloads in either PowerShell, or JavaScript. There is one organization called Kimsuky. 

Kimsuky is an espionage group inside of Korea that has been active since 2012. They normally exploit south Koreas governmental entities, think tanks, and experts in their filed. Then they expanded into the United States, Rusia, Europe, and the UN. With a focus on intel collection on the foreign policy issues related to the Korean peninsula and nuclear policy. Kimsuky was responsible for the 2014 Korea Hydro & nuclear power co compromise. They are also responsible for the stolen pencil in 2018, Kabar Cobra in 2019, and operation smoke screen in 2019.
Another piece of software to create a token manipulation attack is called Hydraq. What this piece of software does is create a backdoor so that a malicious actor can create tokens when no one is at the computer. This piece of software was used in an attack on google called operation Auroa and in 2009. And variants of this software are being used in China by an advanced persistent threat called APT17.  APT17 uses network intrusions on us government entities, defense industry, law firms, information technology companies, mining companies, and non-government entities. APT17 uses a couple of diverse types of exploits that involve web servers. 

Another that used Hydraq was Elderwood. This group is also in China but is not APT17 and has targeted defense organizations, supply chain manufacturers, human rights, non-governmental organizations (NGO’s), and IT service providers. Elderwood uses multiple types of exploits.

MITIGATION
The first mitigation that I recommend is from the ATT&CK framework and is M106 or user privileged account management. What this control does is that it limits the controls that privileged accounts can have and should be configured that only the local system account can create tokens. Also configuring who can create these tokens should be configured.

Another mitigation that is recommended from the ATT&CK framework is M1018 or User Account Management. What this security control does is it makes the attack surface much smaller. The attack surface is how many ways the attacker can use against us. The reason the attack surface is much smaller is because if this security control is in place, then the attacker must be in root to make tokens.

The next controls that I will implement is through the NIST cybersecurity framework, and those controls are MA4 to MA4(4) the first control is. Non-Local Maintenance I chose these because they protect our machines from non-local attacks.
MA (1) Non-Local Maintenance: and what it does it approves and monitors non-local machines and diagnostical activities. Why this is important is that can take out machines that are making the tokens that are creating the risk.

MA (2) Non-Local Maintenance | document non-local maintenance: What this does is that allows for the use of non-local machines and diagnostic tools as a constant. And is documented in the security plan for information systems. This is important is that it logs the malicious machines so that we know and implement the controls to mitigate those risks.

MA (3) Non-Local Maintenance | Comparable Security / Sanitization:  employs strong authenticators in the establishment of non-local maintenance and diagnostic sessions. MA1 and MA2 are a prerequisite for this control so that we don’t accidentally remove the wrong machine.

MA (4) Non-Local Maintenance | Authentication / Separation of Maintenance Sessions:   this control also maintains logs for non-local maintenance for diagnostic activities and maintenance also terminates all session network connections when nonlocal maintenance is completed.

DETECTION

There are multiple detection types that we can use found on the ATT&CK framework page.

Active Directory:  Check the AD to make sure that settings to tokens where not changed to operate under a different user or security context to make sure that there are no privileges that bypass security controls.

Command Execution: Monitor for executed commands that can change tokens by auditing the CLI activity. Specifically, the runas command. More detailed logging is not enabled. 

OS API Execution: Monitor for API calls, normally loaded by a payload, for token manipulation. Only through analysis of user activity, examination of running processes, and other correlation of EDR and other network behavior. 

Process Creation: Monitor for executed processes that may modify access tokens to operate under a different user.

Process Metadata: Query systems for processing and thread token information and look for inconsistencies, such as user owning processes that let the owner impersonate the local system account. Look for inconsistencies in between the fields that store the PPID. 

User account metadata: Monitor for contextual data about an account, which may include usernames, user ID’s, and environmental data.

References:
ATT&CK framework | Access Token Manipulation “Access Token Manipulation, Technique T1134 - Enterprise | MITRE ATT&CK®”
ATT&CK framework | Apple Seed “AppleSeed, Software S0622 | MITRE ATT&CK®”
ATT&CK framework | Kimsuky “Kimsuky, STOLEN PENCIL, Thallium, Black Banshee, Velvet Chollima, Group G0094 | MITRE ATT&CK®”
ATT&CK framework | Hydraq “Hydraq, Software S0203 | MITRE ATT&CK®”
ATT&CK framework | APT 17 “APT17, Deputy Dog, Group G0025 | MITRE ATT&CK®”
ATT&CK framework | Elderwood “Elderwood, Elderwood Gang, Beijing Group, Sneaky Panda, Group G0066 | MITRE ATT&CK®”
NIST framework | publication 2018 Microsoft excel “2018-04-16_framework_v1.1_core1.xlsx (live.com)”
NIST framework | publication Microsoft Document “*Microsoft Word - 800-53-rev4-ipd-final-1-clean.docx (nist.gov)”
